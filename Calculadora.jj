options {
      STATIC = false;
}
PARSER_BEGIN(Somador)
      class Somador {
           static public void main( String[] args )
           throws ParseException, TokenMgrError {
                Somador parser = new Somador( System.in ) ;
                parser.Start();
            }
      }
PARSER_END(Somador)

SKIP : { " "  
       | "\t"
       }     
SKIP : { "\n"  
       | "\r"
       | "\r\n" }

TOKEN : { < FUNCTION : 
      ("m") + ("a") + ("i") +("n") > } 
TOKEN : { < TYPE : 
      ("i") + ("n") + ("t")  
      | ("d") + ("o") + ("u") + ("b") + ("l") + ("e") 
      | ("s") + ("t") + ("r") + ("i") + ("n") + ("g") > }
TOKEN : { < LAST : 
      ";" > }  
TOKEN : { < ABREPAR : 
      "(" > }  
TOKEN : { < ATRIBUICAO : 
      ("=") 
      | ("+") + ("=") 
      | ("-") + ("=") > }
TOKEN : { < INCREMENTO : 
      ("+") + ("+") 
      | ("-") + ("-") > }
TOKEN : { < COMPARACAO : 
      ("=") + ("=") 
      | (">") + ("=") 
      | ("<") + ("=") 
      | (">") 
      | ("<")> }
TOKEN : { < CONCATCOMPARACAO : 
      ("&") + ("&") 
      | ("|") + ("|") > }
TOKEN : { < RESERVADA :  
      ("r") + ("e") + ("t") + ("u") + ("r") + ("n") 
      | ("w") + ("h") + ("i") + ("l") + ("e") 
      | ("f") + ("o") + ("r") 
      | ("i") + ("f") 
      | ("b") + ("r") + ("e") + ("a") + ("k") 
      | ("c") + ("o") + ("u") + ("t") 
      | ("c") + ("i") + ("n") 
      | ("e") + ("l") + ("s") + ("e") > }
TOKEN : { < BOOL : 
      ("t") + ("r") + ("u") + ("e") 
      | ("f") + ("a") + ("l") + ("s") + ("e")> }
TOKEN : { < SEPARADOR : 
      ("<") + ("<") 
      | (">") + (">") > }
TOKEN : { < FECHAPAR : 
      ")" > }  
TOKEN : { < OPERADOR : 
      "+" 
      | "-" 
      | "*" 
      | "/" > }
TOKEN : { < NUMBER : 
      (["0"-"9"])+ 
      | (["0"-"9"])+ "." (["0"-"9"])+ 
      | (["0"-"9"])+ "." 
      | "." (["0"-"9"])+ > }
TOKEN : { < WORD : 
      (["a"-"z"])+ 
      | (["A"-"Z"])+ > } 
TOKEN : { < ABRECHAVE : 
      "{" > }  
TOKEN : { < FECHACHAVE : 
      "}" > } 
TOKEN : { < ASPA : 
      "\"" > }   

void Start() : {}{
      main()
}

void main() : {} {
      <TYPE> <FUNCTION> <ABREPAR> <FECHAPAR> <ABRECHAVE>
            (Programacao())*
      <FECHACHAVE>
      <EOF>
}

void Programacao() : {}{
      (Variable() <LAST>)
      | Reservate()
      | Declaracao()
}

void Variable() : {}{
      <WORD> (<INCREMENTO> | <ATRIBUICAO> Atribuicao())
}

void Declaracao() : {}{
      <TYPE> <WORD> (((<ATRIBUICAO> (<NUMBER> | <WORD> | Literal())) <LAST>) | <LAST>)
}

void Atribuicao() : {}{
      <NUMBER> | <WORD> | Literal()
}

void Comparacao() : {} {
      ((<BOOL> | ((<NUMBER> | <WORD>) <COMPARACAO> (<NUMBER> | <WORD>))))
}

void LacoECondicionas() : {} {      
      (<ABREPAR> ((Declaracao() Comparacao() <LAST> Variable()) | Comparacao()) <FECHAPAR> <ABRECHAVE> (Programacao())* <FECHACHAVE>) | (<ABRECHAVE> (Programacao())* <FECHACHAVE>)
}

void Separate(): {} {
      <SEPARADOR> (<WORD> | <NUMBER>)
}

void Reservate() : {} {
      <RESERVADA> (LacoECondicionas() | (((((<WORD> | <NUMBER>) <LAST>) | (Separate() <LAST>)) | <LAST>)))
}

void Literal() : {} {
      <ASPA> (<WORD> | <NUMBER>)* <ASPA>
}
