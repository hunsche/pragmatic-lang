// ---------------------------------------------------------
// Exemplo 1
// - Reconhecer numero ( plus numero )*
// ---------------------------------------------------------

options {
      STATIC = false; /* os metodos e atributos nao devem ser est√°ticos */
}
PARSER_BEGIN(Somador)
      class Somador {
           static public void main( String[] args )
           throws ParseException, TokenMgrError {
                /* Estas classes serao geradas pelo JavaCC */
                Somador parser = new Somador( System.in ) ;
                parser.Start();
            }
      }
PARSER_END(Somador)

// ---------------------------------------------------------
// Lexico
// ---------------------------------------------------------

SKIP : { " "    /* Estes caracteres devem ser saltados */
       | "\t"
       }     
SKIP : { "\n"   /* Saltar tambem variantes sobre o "nova linha" */
       | "\r"
       | "\r\n" }

TOKEN : { < EMPTY : "" > }
TOKEN : { < FUNCTION : ("m") + ("a") + ("i") +("n") > }  /* O caracter ")" para fecha parenteses */
TOKEN : { < TYPE : ("i") + ("n") + ("t")  | ("d") + ("o") + ("u") + ("b") + ("l") + ("e") | ("s") + ("t") + ("r") + ("i") + ("n") + ("g") > }  /* O caracter ")" para fecha parenteses */
TOKEN : { < LAST : ";" > }  /* O caracter "(" para abre parenteses */
TOKEN : { < ABREPAR : "(" > }  /* O caracter "(" para abre parenteses */
TOKEN : { < ATRIBUICAO : ("=") | ("+") + ("=") | ("-") + ("=") > }
TOKEN : { < INCREMENTO : ("+") + ("+") | ("-") + ("-") > }
TOKEN : { < COMPARACAO : ("=") + ("=") | (">") + ("=") | ("<") + ("=") | (">") | ("<")> }
TOKEN : { < CONCATCOMPARACAO : ("&") + ("&") | ("|") + ("|") > }
TOKEN : { < RESERVADA :  ("f") + ("o") + ("r") | ("i") + ("f") > }
TOKEN : { < BOOL : ("t") + ("r") + ("u") + ("e") | ("f") + ("a") + ("l") + ("s") + ("e")> }
TOKEN : { < SEPARADOR : ("<") + ("<") | (">") + (">") > }
TOKEN : { < FECHAPAR : ")" > }  /* O caracter ")" para fecha parenteses */
TOKEN : { < PLUS : "+" > }  /* O caracter "+" retorna o token PLUS */
TOKEN : { < MINUS : "-" > }  /* O caracter "-" retorna o token MINUS */
TOKEN : { < TIMES : "*" > }  /* O caracter "*" retorna o token TIMES */
TOKEN : { < DIVIDE : "/" > }  /* O caracter "/" retorna o token DIVIDE */
TOKEN : { < NUMBER : (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." | "." (["0"-"9"])+ > }  /* Numero em ponto flutuante */
TOKEN : { < WORD : (["a"-"z"])+ | (["A"-"Z"])+ > }  /* Numero em ponto flutuante */
TOKEN : { < ABRECHAVE : "{" > }  /* O caracter ")" para fecha parenteses */
TOKEN : { < FECHACHAVE : "}" > }  /* O caracter ")" para fecha parenteses */


// EOF : Retornado pelo implicitamente

// ---------------------------------------------------------
// Sintatico
// ---------------------------------------------------------

void Programacao() : {}{
      (Declaracao())*
      (Atribuicao())*      
      (Condicao())*
}

void Start() : {}
{
      //<TYPE> <FUNCTION> <ABREPAR> <FECHAPAR> <ABRECHAVE>
            Programacao()
      //<FECHACHAVE>

 <EOF>
}

void Declaracao() : {}{
      <TYPE> <WORD> (((<ATRIBUICAO> (<NUMBER> | <WORD>)) <LAST>) | <LAST>)
}

void Atribuicao() : {}{
      <WORD> ((<ATRIBUICAO> (<NUMBER> | <WORD>)) | <INCREMENTO>) <LAST>
}

void Comparacao() : {} {
      ((<BOOL> | ((<NUMBER> | <WORD>) <COMPARACAO> (<NUMBER> | <WORD>))) | ( <CONCATCOMPARACAO> Comparacao()))
}

void Condicao() : {}{
      <RESERVADA> <ABREPAR> Comparacao() <FECHAPAR> <ABRECHAVE> Programacao() <FECHACHAVE>
}

void For() : {} {
      <RESERVADA> <ABREPAR> Declaracao() Comparacao() <LAST> Atribuicao() <FECHAPAR> <ABRECHAVE> Programacao() <ABRECHAVE> <LAST>   
}